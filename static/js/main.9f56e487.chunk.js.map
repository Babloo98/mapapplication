{"version":3,"sources":["logo.svg","credentials.js","loader.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MapContainer","this","props","data","type","MapperElement","map","item","position","lat","lastWaypoint","lng","icon","url","lastRunningState","truckRunningState","Date","stopStartTime","getHours","ignitionOn","className","truckNumber","google","zoom","onClick","onMapClicked","initialCenter","React","Component","GoogleApiWrapper","apiKey","language","Loader","src","App","handleAllTruck","value","setState","data1","multiselectRef","current","resetSelectedValues","state","idleTrucks","runningTrucks","stoppedTrucks","errorTrucks","activeStopped","active","allTruck","activeError","activeIdle","activeRunning","UpdatedTrucks","Array","prototype","concat","apply","onSelect","selectedList","selectedItem","updatedData","push","onRemove","removedItem","index","splice","createRef","truckNumberArray","selectedValue","isLoading","axios","get","then","response","updatedrunningTrucks","updatederrorTrucks","updatedidleTrucks","stoppedTruckes","updatedstoppedTrucks","catch","error","console","log","length","options","displayValue","isObject","ref","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.9f56e487.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react';\n\nexport class MapContainer extends React.Component {\n\n    componentDidMount(){\n    }\n\n    render(){\n        const { data, type } = this.props;\n        const MapperElement = data.map(item=>{\n            if(type === \"runningTruck\"){\n                return <Marker\n                            position={{lat: item.lastWaypoint.lat, lng: item.lastWaypoint.lng}} \n                            icon={{\n                                url: \"http://maps.google.com/mapfiles/ms/icons/green-dot.png\",\n                            }}\n                        />\n            }\n            if(type === \"stoppedTruck\"){\n                return <Marker\n                            position={{lat: item.lastWaypoint.lat, lng: item.lastWaypoint.lng}} \n                            icon={{\n                                url: \"http://maps.google.com/mapfiles/ms/icons/blue-dot.png\",\n                            }}\n                        />\n            }\n            if(type === \"idleTruck\"){\n                return <Marker\n                            position={{lat: item.lastWaypoint.lat, lng: item.lastWaypoint.lng}} \n                            icon={{\n                                url: \"http://maps.google.com/mapfiles/ms/icons/yellow-dot.png\",\n                            }}\n                        />\n            }\n            if(type === \"errorTruck\"){\n                return <Marker\n                            position={{lat: item.lastWaypoint.lat, lng: item.lastWaypoint.lng}} \n                            icon={{\n                                url: \"http://maps.google.com/mapfiles/ms/icons/red-dot.png\",\n                            }}\n                        />\n            }\n            else{\n                if(!!item.lastRunningState.truckRunningState){\n                    return <Marker\n                            position={{lat: item.lastWaypoint.lat, lng: item.lastWaypoint.lng}} \n                            icon={{\n                                url: \"http://maps.google.com/mapfiles/ms/icons/green-dot.png\",\n                            }}\n                        />\n                }        \n                  else{\n                    if((new Date(item.lastRunningState.stopStartTime).getHours()) > 4){\n                        return <Marker\n                            position={{lat: item.lastWaypoint.lat, lng: item.lastWaypoint.lng}} \n                            icon={{\n                                url: \"http://maps.google.com/mapfiles/ms/icons/red-dot.png\",\n                            }}\n                        />\n                    }\n                    else if(item.lastWaypoint.ignitionOn){\n                        return <Marker\n                            position={{lat: item.lastWaypoint.lat, lng: item.lastWaypoint.lng}} \n                            icon={{\n                                url: \"http://maps.google.com/mapfiles/ms/icons/yellow-dot.png\",\n                            }}\n                        />\n                    }\n                    else{\n                        return <Marker\n                        position={{lat: item.lastWaypoint.lat, lng: item.lastWaypoint.lng}} \n                        icon={{\n                            url: \"http://maps.google.com/mapfiles/ms/icons/blue-dot.png\",\n                        }}\n                        />\n                    }\n                 }\n            }\n        }\n        )\n\n        return(\n            <div className=\"detail-wrapper\">\n                <div className=\"truck-detail\">\n                        {this.props.data.map(item =>{\n                            return <div className=\"individual-truck-detail\">\n                                <h4>{item.truckNumber}</h4>\n                                <h6>Stopped Since Last {new Date(item.lastRunningState.stopStartTime).getHours()} hours</h6>\n                            </div>\n                        })}\n                </div>\n                <div className=\"map-view\">\n                    <Map\n                        google={this.props.google}\n                        zoom={3}\n                        onClick={this.onMapClicked}\n                        initialCenter={{\n                            lat: 30.868778228759766,\n                            lng: 75.99723052978516\n                          }}\n                    >\n                        {MapperElement}\n                    \n                    </Map>\n                </div>\n            </div>   \n                )\n    }\n\n}\n\nexport default GoogleApiWrapper({\n    apiKey: ('AIzaSyBF7d_5a5SVH2jBQqrFLeK1ZvmSTVj-jfY'),\n    language: 'english',\n  })(MapContainer)","import React from 'react';\n\nclass Loader extends React.Component{\n    render(){\n        return(\n            <div className=\"loader\">\n                <img src = \"https://i.pinimg.com/originals/78/e8/26/78e826ca1b9351214dfdd5e47f7e2024.gif\"></img>\n            </div>\n        )\n    }\n}\n\nexport default Loader;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport MapContainer from './credentials';\nimport axios from 'axios';\nimport './style.scss';\nimport { Multiselect } from 'multiselect-react-dropdown';\nimport Loader from './loader'\n\nclass App extends React.Component {\n  \n  \n  constructor(props) {\n    super(props);\n    this.multiselectRef = React.createRef();\n    this.state = {\n      runningTrucks : [],\n      stoppedTrucks: [],\n      idleTrucks: [],\n      errorTrucks: [],\n      allTruck: [],\n      data : [],\n      type: \"\",\n      truckNumberArray : [],\n      data1: [],\n      selectedValue :[],\n      isLoading: true,\n      active: true,\n      activeRunning: false,\n      activeStopped: false,\n      activeIdle: false,\n      activeError: false,\n    };\n}\n\n  componentDidMount(){\n    axios.get('https://api.mystral.in/tt/mobile/logistics/searchTrucks?auth-company=PCH&companyId=33&deactivated=false&key=g2qb5jvucg7j8skpu5q7ria0mu&q-expand=true&q-include=lastRunningState,lastWaypoint')\n      .then((response) => {\n        const {data: { data }} = response;\n        this.setState({data});\n        this.setState({\n          truckNumberArray : data.map(item=>item.truckNumber)\n        })\n        data.map(item =>{\n          if(!!item.lastRunningState.truckRunningState){\n            let updatedrunningTrucks = [];\n             updatedrunningTrucks = [...this.state.runningTrucks]\n             updatedrunningTrucks.push(item)\n              this.setState({\n                runningTrucks: updatedrunningTrucks\n              })\n          }\n          else{\n            if((new Date(item.lastRunningState.stopStartTime).getHours()) > 4){\n              let updatederrorTrucks = [];\n              updatederrorTrucks = [...this.state.errorTrucks]\n              updatederrorTrucks.push(item)\n                this.setState({\n                  errorTrucks: updatederrorTrucks\n                })\n            }\n            else if(item.lastWaypoint.ignitionOn){\n              let updatedidleTrucks = [];\n              updatedidleTrucks = [...this.state.idleTrucks]\n              updatedidleTrucks.push(item)\n               this.setState({\n                 idleTrucks: updatedidleTrucks\n               })\n            }\n            else{\n              this.setState({\n                stoppedTruckes : item\n              })\n              let updatedstoppedTrucks = [];\n              updatedstoppedTrucks = [...this.state.stoppedTrucks]\n              updatedstoppedTrucks.push(item)\n               this.setState({\n                 stoppedTrucks: updatedstoppedTrucks\n               })\n            }\n            \n          }\n        })\n        this.setState({isLoading : false})\n      })\n      .catch(function (error) {\n        console.log('error goes here====>>',error);\n      })\n  };\n\n  handleAllTruck = (value) =>{\n    this.setState({data1: []});\n    this.multiselectRef.current.resetSelectedValues();\n    const {idleTrucks, runningTrucks, stoppedTrucks, errorTrucks ,activeStopped, allTruck, active,activeError, activeIdle, activeRunning} = this.state;\n    if(value === \"allTruck\"){\n      let UpdatedTrucks = [];\n      UpdatedTrucks = Array.prototype.concat.apply([], [idleTrucks, runningTrucks, stoppedTrucks,errorTrucks ]);\n      this.setState({data: UpdatedTrucks,\n                    type: \"allTruck\",\n                    active: !active,\n                    activeRunning:false,\n                    activeStopped: false,\n                    activeIdle: false,\n                    activeError: false\n                    });\n    }\n    if(value=== \"runningTruck\"){\n      this.setState({data: runningTrucks,\n                     type: \"runningTruck\",\n                      activeRunning: !activeRunning,\n                      active: false,\n                      activeStopped: false,\n                      activeIdle: false,\n                      activeError: false});\n      \n    }\n    if(value=== \"stoppedTruck\"){\n      this.setState({data: stoppedTrucks, type: \"stoppedTruck\",\n             activeStopped:!activeStopped,\n             active: false,\n             activeRunning:false,\n             activeIdle: false,\n             activeError: false});\n    }\n    if(value=== \"idleTruck\"){\n      this.setState({data: idleTrucks, type:\"idleTruck\",\n       activeIdle: !activeIdle,\n       active: false,\n       activeRunning:false,\n       activeStopped: false,\n       activeError: false});\n    }\n    if(value=== \"errorTruck\"){\n      this.setState({data: errorTrucks, type: \"errorTruck\",\n       activeError: !activeError,\n       active: false,\n       activeRunning:false,\n       activeStopped: false,\n       activeIdle: false});\n    }\n  };\n\n  onSelect = (selectedList, selectedItem) =>{\n    const { data1, data } = this.state;\n    let updatedData = [...data1];\n    data.map(item => {if(item.truckNumber === selectedItem){\n      updatedData.push(item);\n    }});\n    this.setState({\n      data1: updatedData\n    });\n  };\n\n  onRemove = (selectedList, removedItem) =>{\n    const {data1, data} = this.state;\n    let updatedData = [...data1];\n    data1.map((item,index)=>{if(item.truckNumber === removedItem){\n      updatedData.splice(index,1);\n    }});\n    this.setState({\n      data1: updatedData\n    })\n  }\n\n\n  render(){\n    const { runningTrucks,errorTrucks,activeStopped, allTruck,activeError, activeIdle, activeRunning, isLoading, stoppedTrucks, idleTrucks, data, data1, type, truckNumberArray, active } = this.state; \n    return (\n      <>\n    {isLoading ? <Loader /> :\n        (<div className=\"main-component-wrapper\">\n          <div className=\"main-component\">\n              <div className=\"navbar\">\n                  <div onClick = {() =>this.handleAllTruck(\"allTruck\")} className={`${active ? 'active': ''}`}>\n                    <h4>Total Trucks</h4>\n                    <p>{runningTrucks.length+stoppedTrucks.length+idleTrucks.length+errorTrucks.length}</p>\n                  </div>\n                  <div onClick = {() =>this.handleAllTruck(\"runningTruck\")} className={`${activeRunning ? 'active': ''}`}>\n                    <h4>Running Trucks</h4>\n                    {runningTrucks &&  <p>{runningTrucks.length}</p>}\n                  </div>\n                  <div onClick = {() =>this.handleAllTruck(\"stoppedTruck\")} className={`${activeStopped ? 'active': ''}`}>\n                    <h4>Stopped Trucks</h4>\n                      <p>{stoppedTrucks.length}</p>\n                  </div>\n                  <div onClick = {() =>this.handleAllTruck(\"idleTruck\")} className={`${activeIdle ? 'active': ''}`}>\n                    <h4>Idle Trucks</h4>\n                    <p>{idleTrucks.length}</p>\n                  </div>\n                  <div onClick = {() =>this.handleAllTruck(\"errorTruck\")} className={`${activeError ? 'active': ''}`}>\n                    <h4>Error Trucks</h4>\n                    <p>{errorTrucks.length}</p>\n                  </div>\n                  <div className=\"tracker\">\n                  <Multiselect\n                    options={truckNumberArray} \n                    // selectedValues={selectedValue}\n                    onSelect={this.onSelect}\n                    onRemove={this.onRemove} \n                    displayValue=\"name\"\n                    isObject = {false}\n                    ref={this.multiselectRef}\n                  />\n                  </div>\n              </div>\n              <div>\n                {data1.length ?<MapContainer data = {data1}/>:\n                  <MapContainer data = {data}  type = {type} /> }\n              </div>    \n          </div>\n        </div>)}\n        </> \n    );\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}